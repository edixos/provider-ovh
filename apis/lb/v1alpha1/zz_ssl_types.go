/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SSLInitParameters struct {

	// Certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Certificate chain
	Chain *string `json:"chain,omitempty" tf:"chain,omitempty"`

	// Human readable name for your ssl certificate, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type SSLObservation struct {

	// Certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Certificate chain
	Chain *string `json:"chain,omitempty" tf:"chain,omitempty"`

	// Human readable name for your ssl certificate, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Expire date of your SSL certificate
	ExpireDate *string `json:"expireDate,omitempty" tf:"expire_date,omitempty"`

	// Fingerprint of your SSL certificate
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Subject Alternative Name of your SSL certificate
	San []*string `json:"san,omitempty" tf:"san,omitempty"`

	// Serial of your SSL certificate (Deprecated, use fingerprint instead!)
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Subject of your SSL certificate
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// Type of your SSL certificate.
	// 'built' for SSL certificates managed by the IP Load Balancing. 'custom' for user manager certificates.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SSLParameters struct {

	// Certificate
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Certificate chain
	// +kubebuilder:validation:Optional
	Chain *string `json:"chain,omitempty" tf:"chain,omitempty"`

	// Human readable name for your ssl certificate, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Certificate key
	// +kubebuilder:validation:Optional
	KeySecretRef v1.SecretKeySelector `json:"keySecretRef" tf:"-"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// SSLSpec defines the desired state of SSL
type SSLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SSLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SSLInitParameters `json:"initProvider,omitempty"`
}

// SSLStatus defines the observed state of SSL.
type SSLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SSLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SSL is the Schema for the SSLs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type SSL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificate) || (has(self.initProvider) && has(self.initProvider.certificate))",message="spec.forProvider.certificate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keySecretRef)",message="spec.forProvider.keySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   SSLSpec   `json:"spec"`
	Status SSLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SSLList contains a list of SSLs
type SSLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SSL `json:"items"`
}

// Repository type metadata.
var (
	SSL_Kind             = "SSL"
	SSL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SSL_Kind}.String()
	SSL_KindAPIVersion   = SSL_Kind + "." + CRDGroupVersion.String()
	SSL_GroupVersionKind = CRDGroupVersion.WithKind(SSL_Kind)
)

func init() {
	SchemeBuilder.Register(&SSL{}, &SSLList{})
}

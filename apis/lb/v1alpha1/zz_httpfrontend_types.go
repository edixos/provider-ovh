// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HTTPFrontendInitParameters struct {
	AllowedSource []*string `json:"allowedSource,omitempty" tf:"allowed_source,omitempty"`

	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	DefaultSSLID *float64 `json:"defaultSslId,omitempty" tf:"default_ssl_id,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	HTTPHeader []*string `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	Hsts *bool `json:"hsts,omitempty" tf:"hsts,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	RedirectLocation *string `json:"redirectLocation,omitempty" tf:"redirect_location,omitempty"`

	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type HTTPFrontendObservation struct {
	AllowedSource []*string `json:"allowedSource,omitempty" tf:"allowed_source,omitempty"`

	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	DefaultSSLID *float64 `json:"defaultSslId,omitempty" tf:"default_ssl_id,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	HTTPHeader []*string `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	Hsts *bool `json:"hsts,omitempty" tf:"hsts,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	RedirectLocation *string `json:"redirectLocation,omitempty" tf:"redirect_location,omitempty"`

	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type HTTPFrontendParameters struct {

	// +kubebuilder:validation:Optional
	AllowedSource []*string `json:"allowedSource,omitempty" tf:"allowed_source,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultSSLID *float64 `json:"defaultSslId,omitempty" tf:"default_ssl_id,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPHeader []*string `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	// +kubebuilder:validation:Optional
	Hsts *bool `json:"hsts,omitempty" tf:"hsts,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	RedirectLocation *string `json:"redirectLocation,omitempty" tf:"redirect_location,omitempty"`

	// +kubebuilder:validation:Optional
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// HTTPFrontendSpec defines the desired state of HTTPFrontend
type HTTPFrontendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPFrontendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPFrontendInitParameters `json:"initProvider,omitempty"`
}

// HTTPFrontendStatus defines the observed state of HTTPFrontend.
type HTTPFrontendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPFrontendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPFrontend is the Schema for the HTTPFrontends API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type HTTPFrontend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   HTTPFrontendSpec   `json:"spec"`
	Status HTTPFrontendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPFrontendList contains a list of HTTPFrontends
type HTTPFrontendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPFrontend `json:"items"`
}

// Repository type metadata.
var (
	HTTPFrontend_Kind             = "HTTPFrontend"
	HTTPFrontend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPFrontend_Kind}.String()
	HTTPFrontend_KindAPIVersion   = HTTPFrontend_Kind + "." + CRDGroupVersion.String()
	HTTPFrontend_GroupVersionKind = CRDGroupVersion.WithKind(HTTPFrontend_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPFrontend{}, &HTTPFrontendList{})
}

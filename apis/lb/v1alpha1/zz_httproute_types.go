// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionInitParameters struct {

	// HTTP status code for "redirect" and "reject" actions
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ActionObservation struct {

	// HTTP status code for "redirect" and "reject" actions
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ActionParameters struct {

	// HTTP status code for "redirect" and "reject" actions
	// +kubebuilder:validation:Optional
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type HTTPRouteInitParameters struct {

	// Action triggered when all rules match
	Action []ActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type HTTPRouteObservation struct {

	// Action triggered when all rules match
	Action []ActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of rules to match to trigger action
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route status. Routes in "ok" state are ready to operate
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type HTTPRouteParameters struct {

	// Action triggered when all rules match
	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	// +kubebuilder:validation:Optional
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RulesInitParameters struct {
}

type RulesObservation struct {
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	RuleID *float64 `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	SubField *string `json:"subField,omitempty" tf:"sub_field,omitempty"`
}

type RulesParameters struct {
}

// HTTPRouteSpec defines the desired state of HTTPRoute
type HTTPRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPRouteInitParameters `json:"initProvider,omitempty"`
}

// HTTPRouteStatus defines the observed state of HTTPRoute.
type HTTPRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPRoute is the Schema for the HTTPRoutes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type HTTPRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   HTTPRouteSpec   `json:"spec"`
	Status HTTPRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPRouteList contains a list of HTTPRoutes
type HTTPRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPRoute `json:"items"`
}

// Repository type metadata.
var (
	HTTPRoute_Kind             = "HTTPRoute"
	HTTPRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPRoute_Kind}.String()
	HTTPRoute_KindAPIVersion   = HTTPRoute_Kind + "." + CRDGroupVersion.String()
	HTTPRoute_GroupVersionKind = CRDGroupVersion.WithKind(HTTPRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPRoute{}, &HTTPRouteList{})
}

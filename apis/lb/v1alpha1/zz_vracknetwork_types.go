// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VrackNetworkInitParameters struct {

	// Human readable name for your vrack network
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrack_network_id` attribute
	FarmID []*float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// The internal name of your IPloadbalancer
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// IP block of the private network in the vRack
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type VrackNetworkObservation struct {

	// Human readable name for your vrack network
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrack_network_id` attribute
	FarmID []*float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// The internal name of your IPloadbalancer
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// IP block of the private network in the vRack
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`

	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkID *float64 `json:"vrackNetworkId,omitempty" tf:"vrack_network_id,omitempty"`
}

type VrackNetworkParameters struct {

	// Human readable name for your vrack network
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrack_network_id` attribute
	// +kubebuilder:validation:Optional
	FarmID []*float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	// +kubebuilder:validation:Optional
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// The internal name of your IPloadbalancer
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// IP block of the private network in the vRack
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	// +kubebuilder:validation:Optional
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

// VrackNetworkSpec defines the desired state of VrackNetwork
type VrackNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VrackNetworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VrackNetworkInitParameters `json:"initProvider,omitempty"`
}

// VrackNetworkStatus defines the observed state of VrackNetwork.
type VrackNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VrackNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VrackNetwork is the Schema for the VrackNetworks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type VrackNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.natIp) || (has(self.initProvider) && has(self.initProvider.natIp))",message="spec.forProvider.natIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subnet) || (has(self.initProvider) && has(self.initProvider.subnet))",message="spec.forProvider.subnet is a required parameter"
	Spec   VrackNetworkSpec   `json:"spec"`
	Status VrackNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VrackNetworkList contains a list of VrackNetworks
type VrackNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VrackNetwork `json:"items"`
}

// Repository type metadata.
var (
	VrackNetwork_Kind             = "VrackNetwork"
	VrackNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VrackNetwork_Kind}.String()
	VrackNetwork_KindAPIVersion   = VrackNetwork_Kind + "." + CRDGroupVersion.String()
	VrackNetwork_GroupVersionKind = CRDGroupVersion.WithKind(VrackNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&VrackNetwork{}, &VrackNetworkList{})
}

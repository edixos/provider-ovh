/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UDPFarmInitParameters struct {

	// Human readable name for your backend, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Port attached to your farm ([1..49151]). Inherited from frontend if null
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkID *float64 `json:"vrackNetworkId,omitempty" tf:"vrack_network_id,omitempty"`

	// Zone of your farm
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type UDPFarmObservation struct {

	// Human readable name for your backend, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of your farm
	FarmID *float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Port attached to your farm ([1..49151]). Inherited from frontend if null
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkID *float64 `json:"vrackNetworkId,omitempty" tf:"vrack_network_id,omitempty"`

	// Zone of your farm
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type UDPFarmParameters struct {

	// Human readable name for your backend, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Port attached to your farm ([1..49151]). Inherited from frontend if null
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	// +kubebuilder:validation:Optional
	VrackNetworkID *float64 `json:"vrackNetworkId,omitempty" tf:"vrack_network_id,omitempty"`

	// Zone of your farm
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// UDPFarmSpec defines the desired state of UDPFarm
type UDPFarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UDPFarmParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UDPFarmInitParameters `json:"initProvider,omitempty"`
}

// UDPFarmStatus defines the observed state of UDPFarm.
type UDPFarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UDPFarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UDPFarm is the Schema for the UDPFarms API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type UDPFarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   UDPFarmSpec   `json:"spec"`
	Status UDPFarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UDPFarmList contains a list of UDPFarms
type UDPFarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UDPFarm `json:"items"`
}

// Repository type metadata.
var (
	UDPFarm_Kind             = "UDPFarm"
	UDPFarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UDPFarm_Kind}.String()
	UDPFarm_KindAPIVersion   = UDPFarm_Kind + "." + CRDGroupVersion.String()
	UDPFarm_GroupVersionKind = CRDGroupVersion.WithKind(UDPFarm_Kind)
)

func init() {
	SchemeBuilder.Register(&UDPFarm{}, &UDPFarmList{})
}

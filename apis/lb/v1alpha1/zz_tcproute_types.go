/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TCPRouteActionInitParameters struct {

	// Farm ID for "farm" action type, empty for others
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TCPRouteActionObservation struct {

	// Farm ID for "farm" action type, empty for others
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TCPRouteActionParameters struct {

	// Farm ID for "farm" action type, empty for others
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Action to trigger if all the rules of this route matches
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type TCPRouteInitParameters struct {

	// Action triggered when all rules match
	Action []TCPRouteActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TCPRouteObservation struct {

	// Action triggered when all rules match
	Action []TCPRouteActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of rules to match to trigger action
	Rules []TCPRouteRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route status. Routes in "ok" state are ready to operate
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TCPRouteParameters struct {

	// Action triggered when all rules match
	// +kubebuilder:validation:Optional
	Action []TCPRouteActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Human readable name for your route, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Route traffic for this frontend
	// +kubebuilder:validation:Optional
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TCPRouteRulesInitParameters struct {
}

type TCPRouteRulesObservation struct {
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	RuleID *float64 `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	SubField *string `json:"subField,omitempty" tf:"sub_field,omitempty"`
}

type TCPRouteRulesParameters struct {
}

// TCPRouteSpec defines the desired state of TCPRoute
type TCPRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TCPRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TCPRouteInitParameters `json:"initProvider,omitempty"`
}

// TCPRouteStatus defines the observed state of TCPRoute.
type TCPRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TCPRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TCPRoute is the Schema for the TCPRoutes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,lb}
type TCPRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   TCPRouteSpec   `json:"spec"`
	Status TCPRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TCPRouteList contains a list of TCPRoutes
type TCPRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TCPRoute `json:"items"`
}

// Repository type metadata.
var (
	TCPRoute_Kind             = "TCPRoute"
	TCPRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TCPRoute_Kind}.String()
	TCPRoute_KindAPIVersion   = TCPRoute_Kind + "." + CRDGroupVersion.String()
	TCPRoute_GroupVersionKind = CRDGroupVersion.WithKind(TCPRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&TCPRoute{}, &TCPRouteList{})
}

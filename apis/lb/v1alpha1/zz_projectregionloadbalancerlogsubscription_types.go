/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectRegionLoadbalancerLogSubscriptionInitParameters struct {

	// Log kind name of this subscription
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// ID representing the loadbalancer of the resource
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Region name of the resource representing the name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// ID representing the stream of the resource
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

type ProjectRegionLoadbalancerLogSubscriptionObservation struct {

	// Creation date of the subscription
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log kind name of this subscription
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Name of the destination log service
	LdpServiceName *string `json:"ldpServiceName,omitempty" tf:"ldp_service_name,omitempty"`

	// ID representing the loadbalancer of the resource
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Identifier of the operation
	OperationID *string `json:"operationId,omitempty" tf:"operation_id,omitempty"`

	// Region name of the resource representing the name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Name of subscribed resource, where the logs come from
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// Type of subscribed resource, where the logs come from
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// ID representing the stream of the resource
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`

	// Id of the subscription
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Last update date of the subscription
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ProjectRegionLoadbalancerLogSubscriptionParameters struct {

	// Log kind name of this subscription
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// ID representing the loadbalancer of the resource
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Region name of the resource representing the name of the region.
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// ID representing the stream of the resource
	// +kubebuilder:validation:Optional
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

// ProjectRegionLoadbalancerLogSubscriptionSpec defines the desired state of ProjectRegionLoadbalancerLogSubscription
type ProjectRegionLoadbalancerLogSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectRegionLoadbalancerLogSubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectRegionLoadbalancerLogSubscriptionInitParameters `json:"initProvider,omitempty"`
}

// ProjectRegionLoadbalancerLogSubscriptionStatus defines the observed state of ProjectRegionLoadbalancerLogSubscription.
type ProjectRegionLoadbalancerLogSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectRegionLoadbalancerLogSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectRegionLoadbalancerLogSubscription is the Schema for the ProjectRegionLoadbalancerLogSubscriptions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectRegionLoadbalancerLogSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kind) || (has(self.initProvider) && has(self.initProvider.kind))",message="spec.forProvider.kind is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadbalancerId) || (has(self.initProvider) && has(self.initProvider.loadbalancerId))",message="spec.forProvider.loadbalancerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionName) || (has(self.initProvider) && has(self.initProvider.regionName))",message="spec.forProvider.regionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.streamId) || (has(self.initProvider) && has(self.initProvider.streamId))",message="spec.forProvider.streamId is a required parameter"
	Spec   ProjectRegionLoadbalancerLogSubscriptionSpec   `json:"spec"`
	Status ProjectRegionLoadbalancerLogSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectRegionLoadbalancerLogSubscriptionList contains a list of ProjectRegionLoadbalancerLogSubscriptions
type ProjectRegionLoadbalancerLogSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectRegionLoadbalancerLogSubscription `json:"items"`
}

// Repository type metadata.
var (
	ProjectRegionLoadbalancerLogSubscription_Kind             = "ProjectRegionLoadbalancerLogSubscription"
	ProjectRegionLoadbalancerLogSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectRegionLoadbalancerLogSubscription_Kind}.String()
	ProjectRegionLoadbalancerLogSubscription_KindAPIVersion   = ProjectRegionLoadbalancerLogSubscription_Kind + "." + CRDGroupVersion.String()
	ProjectRegionLoadbalancerLogSubscription_GroupVersionKind = CRDGroupVersion.WithKind(ProjectRegionLoadbalancerLogSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectRegionLoadbalancerLogSubscription{}, &ProjectRegionLoadbalancerLogSubscriptionList{})
}

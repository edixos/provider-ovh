/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UDPFrontendInitParameters struct {

	// Only attach frontend on these ip. No restriction if null
	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	// Default UDP Farm of your frontend
	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	// Disable your frontend. Default: 'false'
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Human readable name for your frontend, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Port(s) attached to your frontend. Supports single port (numerical value), range (2 dash-delimited increasing ports) and comma-separated list of 'single port' and/or 'range'. Each port must be in the [1;49151] range.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Zone of your frontend. Use "all" for all owned zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type UDPFrontendObservation struct {

	// Only attach frontend on these ip. No restriction if null
	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	// Default UDP Farm of your frontend
	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	// Disable your frontend. Default: 'false'
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Human readable name for your frontend, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of your frontend
	FrontendID *float64 `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Port(s) attached to your frontend. Supports single port (numerical value), range (2 dash-delimited increasing ports) and comma-separated list of 'single port' and/or 'range'. Each port must be in the [1;49151] range.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Zone of your frontend. Use "all" for all owned zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type UDPFrontendParameters struct {

	// Only attach frontend on these ip. No restriction if null
	// +kubebuilder:validation:Optional
	DedicatedIpfo []*string `json:"dedicatedIpfo,omitempty" tf:"dedicated_ipfo,omitempty"`

	// Default UDP Farm of your frontend
	// +kubebuilder:validation:Optional
	DefaultFarmID *float64 `json:"defaultFarmId,omitempty" tf:"default_farm_id,omitempty"`

	// Disable your frontend. Default: 'false'
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Human readable name for your frontend, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Port(s) attached to your frontend. Supports single port (numerical value), range (2 dash-delimited increasing ports) and comma-separated list of 'single port' and/or 'range'. Each port must be in the [1;49151] range.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Zone of your frontend. Use "all" for all owned zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// UDPFrontendSpec defines the desired state of UDPFrontend
type UDPFrontendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UDPFrontendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UDPFrontendInitParameters `json:"initProvider,omitempty"`
}

// UDPFrontendStatus defines the observed state of UDPFrontend.
type UDPFrontendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UDPFrontendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UDPFrontend is the Schema for the UDPFrontends API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,lb}
type UDPFrontend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   UDPFrontendSpec   `json:"spec"`
	Status UDPFrontendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UDPFrontendList contains a list of UDPFrontends
type UDPFrontendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UDPFrontend `json:"items"`
}

// Repository type metadata.
var (
	UDPFrontend_Kind             = "UDPFrontend"
	UDPFrontend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UDPFrontend_Kind}.String()
	UDPFrontend_KindAPIVersion   = UDPFrontend_Kind + "." + CRDGroupVersion.String()
	UDPFrontend_GroupVersionKind = CRDGroupVersion.WithKind(UDPFrontend_Kind)
)

func init() {
	SchemeBuilder.Register(&UDPFrontend{}, &UDPFrontendList{})
}

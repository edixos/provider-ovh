/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UDPFarmServerInitParameters struct {

	// IPv4 address (e.g., 192.0.2.0)
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Human readable name for your server, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of your farm
	FarmID *float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Possible values for server status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UDPFarmServerObservation struct {

	// IPv4 address (e.g., 192.0.2.0)
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Synonym for farm_id
	BackendID *float64 `json:"backendId,omitempty" tf:"backend_id,omitempty"`

	// Human readable name for your server, this field is for you
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of your farm
	FarmID *float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Id of your server
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// The internal name of your IP load balancing
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Possible values for server status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UDPFarmServerParameters struct {

	// IPv4 address (e.g., 192.0.2.0)
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Human readable name for your server, this field is for you
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of your farm
	// +kubebuilder:validation:Optional
	FarmID *float64 `json:"farmId,omitempty" tf:"farm_id,omitempty"`

	// Port attached to your server ([1..49151]). Inherited from farm if null
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The internal name of your IP load balancing
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Possible values for server status
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// UDPFarmServerSpec defines the desired state of UDPFarmServer
type UDPFarmServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UDPFarmServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UDPFarmServerInitParameters `json:"initProvider,omitempty"`
}

// UDPFarmServerStatus defines the observed state of UDPFarmServer.
type UDPFarmServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UDPFarmServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UDPFarmServer is the Schema for the UDPFarmServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type UDPFarmServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.farmId) || (has(self.initProvider) && has(self.initProvider.farmId))",message="spec.forProvider.farmId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   UDPFarmServerSpec   `json:"spec"`
	Status UDPFarmServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UDPFarmServerList contains a list of UDPFarmServers
type UDPFarmServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UDPFarmServer `json:"items"`
}

// Repository type metadata.
var (
	UDPFarmServer_Kind             = "UDPFarmServer"
	UDPFarmServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UDPFarmServer_Kind}.String()
	UDPFarmServer_KindAPIVersion   = UDPFarmServer_Kind + "." + CRDGroupVersion.String()
	UDPFarmServer_GroupVersionKind = CRDGroupVersion.WithKind(UDPFarmServer_Kind)
)

func init() {
	SchemeBuilder.Register(&UDPFarmServer{}, &UDPFarmServerList{})
}

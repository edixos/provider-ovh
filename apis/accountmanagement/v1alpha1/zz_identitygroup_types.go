// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IdentityGroupInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type IdentityGroupObservation struct {
	Creation *string `json:"creation,omitempty" tf:"creation,omitempty"`

	DefaultGroup *bool `json:"defaultGroup,omitempty" tf:"default_group,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`
}

type IdentityGroupParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

// IdentityGroupSpec defines the desired state of IdentityGroup
type IdentityGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IdentityGroupInitParameters `json:"initProvider,omitempty"`
}

// IdentityGroupStatus defines the observed state of IdentityGroup.
type IdentityGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityGroup is the Schema for the IdentityGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type IdentityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityGroupSpec   `json:"spec"`
	Status            IdentityGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityGroupList contains a list of IdentityGroups
type IdentityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityGroup `json:"items"`
}

// Repository type metadata.
var (
	IdentityGroup_Kind             = "IdentityGroup"
	IdentityGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IdentityGroup_Kind}.String()
	IdentityGroup_KindAPIVersion   = IdentityGroup_Kind + "." + CRDGroupVersion.String()
	IdentityGroup_GroupVersionKind = CRDGroupVersion.WithKind(IdentityGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&IdentityGroup{}, &IdentityGroupList{})
}

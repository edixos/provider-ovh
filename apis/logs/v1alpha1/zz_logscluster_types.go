// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogsClusterInitParameters struct {

	// Allowed networks for ARCHIVE flow type
	ArchiveAllowedNetworks []*string `json:"archiveAllowedNetworks,omitempty" tf:"archive_allowed_networks,omitempty"`

	// Allowed networks for DIRECT_INPUT flow type
	DirectInputAllowedNetworks []*string `json:"directInputAllowedNetworks,omitempty" tf:"direct_input_allowed_networks,omitempty"`

	// Allowed networks for QUERY flow type
	QueryAllowedNetworks []*string `json:"queryAllowedNetworks,omitempty" tf:"query_allowed_networks,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type LogsClusterObservation struct {

	// Allowed networks for ARCHIVE flow type
	ArchiveAllowedNetworks []*string `json:"archiveAllowedNetworks,omitempty" tf:"archive_allowed_networks,omitempty"`

	// Cluster type
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Allowed networks for DIRECT_INPUT flow type
	DirectInputAllowedNetworks []*string `json:"directInputAllowedNetworks,omitempty" tf:"direct_input_allowed_networks,omitempty"`

	// hostname
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// All content generated by given service will be placed on this cluster
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// Allow given service to perform advanced operations on cluster
	IsUnlocked *bool `json:"isUnlocked,omitempty" tf:"is_unlocked,omitempty"`

	// Allowed networks for QUERY flow type
	QueryAllowedNetworks []*string `json:"queryAllowedNetworks,omitempty" tf:"query_allowed_networks,omitempty"`

	// Data center localization
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type LogsClusterParameters struct {

	// Allowed networks for ARCHIVE flow type
	// +kubebuilder:validation:Optional
	ArchiveAllowedNetworks []*string `json:"archiveAllowedNetworks,omitempty" tf:"archive_allowed_networks,omitempty"`

	// Allowed networks for DIRECT_INPUT flow type
	// +kubebuilder:validation:Optional
	DirectInputAllowedNetworks []*string `json:"directInputAllowedNetworks,omitempty" tf:"direct_input_allowed_networks,omitempty"`

	// Allowed networks for QUERY flow type
	// +kubebuilder:validation:Optional
	QueryAllowedNetworks []*string `json:"queryAllowedNetworks,omitempty" tf:"query_allowed_networks,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// LogsClusterSpec defines the desired state of LogsCluster
type LogsClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogsClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogsClusterInitParameters `json:"initProvider,omitempty"`
}

// LogsClusterStatus defines the observed state of LogsCluster.
type LogsClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogsClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogsCluster is the Schema for the LogsClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type LogsCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   LogsClusterSpec   `json:"spec"`
	Status LogsClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogsClusterList contains a list of LogsClusters
type LogsClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogsCluster `json:"items"`
}

// Repository type metadata.
var (
	LogsCluster_Kind             = "LogsCluster"
	LogsCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogsCluster_Kind}.String()
	LogsCluster_KindAPIVersion   = LogsCluster_Kind + "." + CRDGroupVersion.String()
	LogsCluster_GroupVersionKind = CRDGroupVersion.WithKind(LogsCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&LogsCluster{}, &LogsClusterList{})
}

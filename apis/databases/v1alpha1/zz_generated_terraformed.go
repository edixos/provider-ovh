// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabase
func (mg *ProjectDatabase) GetTerraformResourceType() string {
	return "ovh_cloud_project_database"
}

// GetConnectionDetailsMapping for this ProjectDatabase
func (tr *ProjectDatabase) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabase
func (tr *ProjectDatabase) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabase
func (tr *ProjectDatabase) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabase
func (tr *ProjectDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabase
func (tr *ProjectDatabase) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabase
func (tr *ProjectDatabase) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabase
func (tr *ProjectDatabase) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabase) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseDatabase
func (mg *ProjectDatabaseDatabase) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_database"
}

// GetConnectionDetailsMapping for this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseDatabase
func (tr *ProjectDatabaseDatabase) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseDatabase) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseIntegration
func (mg *ProjectDatabaseIntegration) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_integration"
}

// GetConnectionDetailsMapping for this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseIntegration
func (tr *ProjectDatabaseIntegration) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseIntegration using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseIntegration) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseIntegrationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseIntegration) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseIPRestriction
func (mg *ProjectDatabaseIPRestriction) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_ip_restriction"
}

// GetConnectionDetailsMapping for this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseIPRestriction
func (tr *ProjectDatabaseIPRestriction) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseIPRestriction using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseIPRestriction) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseIPRestrictionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseIPRestriction) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseKafkaACL
func (mg *ProjectDatabaseKafkaACL) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_kafka_acl"
}

// GetConnectionDetailsMapping for this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseKafkaACL
func (tr *ProjectDatabaseKafkaACL) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseKafkaACL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseKafkaACL) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseKafkaACLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseKafkaACL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseKafkaSchemaregistryacl
func (mg *ProjectDatabaseKafkaSchemaregistryacl) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_kafka_schemaregistryacl"
}

// GetConnectionDetailsMapping for this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseKafkaSchemaregistryacl
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseKafkaSchemaregistryacl using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseKafkaSchemaregistryacl) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseKafkaSchemaregistryaclParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseKafkaSchemaregistryacl) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseKafkaTopic
func (mg *ProjectDatabaseKafkaTopic) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_kafka_topic"
}

// GetConnectionDetailsMapping for this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseKafkaTopic
func (tr *ProjectDatabaseKafkaTopic) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseKafkaTopic using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseKafkaTopic) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseKafkaTopicParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseKafkaTopic) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseM3DbNamespace
func (mg *ProjectDatabaseM3DbNamespace) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_m3db_namespace"
}

// GetConnectionDetailsMapping for this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseM3DbNamespace
func (tr *ProjectDatabaseM3DbNamespace) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseM3DbNamespace using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseM3DbNamespace) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseM3DbNamespaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseM3DbNamespace) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseM3DbUser
func (mg *ProjectDatabaseM3DbUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_m3db_user"
}

// GetConnectionDetailsMapping for this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseM3DbUser
func (tr *ProjectDatabaseM3DbUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseM3DbUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseM3DbUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseM3DbUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseM3DbUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseMongodbUser
func (mg *ProjectDatabaseMongodbUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_mongodb_user"
}

// GetConnectionDetailsMapping for this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseMongodbUser
func (tr *ProjectDatabaseMongodbUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseMongodbUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseMongodbUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseMongodbUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseMongodbUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseOpensearchPattern
func (mg *ProjectDatabaseOpensearchPattern) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_opensearch_pattern"
}

// GetConnectionDetailsMapping for this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseOpensearchPattern
func (tr *ProjectDatabaseOpensearchPattern) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseOpensearchPattern using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseOpensearchPattern) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseOpensearchPatternParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseOpensearchPattern) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseOpensearchUser
func (mg *ProjectDatabaseOpensearchUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_opensearch_user"
}

// GetConnectionDetailsMapping for this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseOpensearchUser
func (tr *ProjectDatabaseOpensearchUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseOpensearchUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseOpensearchUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseOpensearchUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseOpensearchUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabasePostgresqlUser
func (mg *ProjectDatabasePostgresqlUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_postgresql_user"
}

// GetConnectionDetailsMapping for this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabasePostgresqlUser
func (tr *ProjectDatabasePostgresqlUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabasePostgresqlUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabasePostgresqlUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabasePostgresqlUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabasePostgresqlUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseRedisUser
func (mg *ProjectDatabaseRedisUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_redis_user"
}

// GetConnectionDetailsMapping for this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseRedisUser
func (tr *ProjectDatabaseRedisUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseRedisUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseRedisUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseRedisUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseRedisUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProjectDatabaseUser
func (mg *ProjectDatabaseUser) GetTerraformResourceType() string {
	return "ovh_cloud_project_database_user"
}

// GetConnectionDetailsMapping for this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "status.atProvider.password"}
}

// GetObservation of this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ProjectDatabaseUser
func (tr *ProjectDatabaseUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ProjectDatabaseUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProjectDatabaseUser) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectDatabaseUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProjectDatabaseUser) GetTerraformSchemaVersion() int {
	return 0
}

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectDatabasePostgresqlConnectionPoolInitParameters struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Database used for the connection pool
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Connection mode to the connection pool
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Name of the connection pool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the connection pool
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Database user authorized to connect to the pool, if none all the users are allowed
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ProjectDatabasePostgresqlConnectionPoolObservation struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Database used for the connection pool
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Connection mode to the connection pool
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Name of the connection pool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the connection pool
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// SSL connection mode for the pool
	SSLMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the connection pool
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Connection URI to the pool
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Database user authorized to connect to the pool, if none all the users are allowed
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ProjectDatabasePostgresqlConnectionPoolParameters struct {

	// Id of the database cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Database used for the connection pool
	// +kubebuilder:validation:Optional
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Connection mode to the connection pool
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Name of the connection pool
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the connection pool
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Database user authorized to connect to the pool, if none all the users are allowed
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// ProjectDatabasePostgresqlConnectionPoolSpec defines the desired state of ProjectDatabasePostgresqlConnectionPool
type ProjectDatabasePostgresqlConnectionPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectDatabasePostgresqlConnectionPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectDatabasePostgresqlConnectionPoolInitParameters `json:"initProvider,omitempty"`
}

// ProjectDatabasePostgresqlConnectionPoolStatus defines the observed state of ProjectDatabasePostgresqlConnectionPool.
type ProjectDatabasePostgresqlConnectionPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectDatabasePostgresqlConnectionPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectDatabasePostgresqlConnectionPool is the Schema for the ProjectDatabasePostgresqlConnectionPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,lb}
type ProjectDatabasePostgresqlConnectionPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.databaseId) || (has(self.initProvider) && has(self.initProvider.databaseId))",message="spec.forProvider.databaseId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   ProjectDatabasePostgresqlConnectionPoolSpec   `json:"spec"`
	Status ProjectDatabasePostgresqlConnectionPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectDatabasePostgresqlConnectionPoolList contains a list of ProjectDatabasePostgresqlConnectionPools
type ProjectDatabasePostgresqlConnectionPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectDatabasePostgresqlConnectionPool `json:"items"`
}

// Repository type metadata.
var (
	ProjectDatabasePostgresqlConnectionPool_Kind             = "ProjectDatabasePostgresqlConnectionPool"
	ProjectDatabasePostgresqlConnectionPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectDatabasePostgresqlConnectionPool_Kind}.String()
	ProjectDatabasePostgresqlConnectionPool_KindAPIVersion   = ProjectDatabasePostgresqlConnectionPool_Kind + "." + CRDGroupVersion.String()
	ProjectDatabasePostgresqlConnectionPool_GroupVersionKind = CRDGroupVersion.WithKind(ProjectDatabasePostgresqlConnectionPool_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectDatabasePostgresqlConnectionPool{}, &ProjectDatabasePostgresqlConnectionPoolList{})
}

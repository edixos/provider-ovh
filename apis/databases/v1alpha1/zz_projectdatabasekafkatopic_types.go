// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectDatabaseKafkaTopicInitParameters struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *float64 `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// Name of the topic
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of partitions for this topic
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Number of replication for this topic
	Replication *float64 `json:"replication,omitempty" tf:"replication,omitempty"`

	// Number of bytes for the retention of the data for this topic
	RetentionBytes *float64 `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// Number of hours for the retention of the data for this topic
	RetentionHours *float64 `json:"retentionHours,omitempty" tf:"retention_hours,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ProjectDatabaseKafkaTopicObservation struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *float64 `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// Name of the topic
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of partitions for this topic
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Number of replication for this topic
	Replication *float64 `json:"replication,omitempty" tf:"replication,omitempty"`

	// Number of bytes for the retention of the data for this topic
	RetentionBytes *float64 `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// Number of hours for the retention of the data for this topic
	RetentionHours *float64 `json:"retentionHours,omitempty" tf:"retention_hours,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ProjectDatabaseKafkaTopicParameters struct {

	// Id of the database cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Minimum insync replica accepted for this topic
	// +kubebuilder:validation:Optional
	MinInsyncReplicas *float64 `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// Name of the topic
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of partitions for this topic
	// +kubebuilder:validation:Optional
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Number of replication for this topic
	// +kubebuilder:validation:Optional
	Replication *float64 `json:"replication,omitempty" tf:"replication,omitempty"`

	// Number of bytes for the retention of the data for this topic
	// +kubebuilder:validation:Optional
	RetentionBytes *float64 `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// Number of hours for the retention of the data for this topic
	// +kubebuilder:validation:Optional
	RetentionHours *float64 `json:"retentionHours,omitempty" tf:"retention_hours,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// ProjectDatabaseKafkaTopicSpec defines the desired state of ProjectDatabaseKafkaTopic
type ProjectDatabaseKafkaTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectDatabaseKafkaTopicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectDatabaseKafkaTopicInitParameters `json:"initProvider,omitempty"`
}

// ProjectDatabaseKafkaTopicStatus defines the observed state of ProjectDatabaseKafkaTopic.
type ProjectDatabaseKafkaTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectDatabaseKafkaTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectDatabaseKafkaTopic is the Schema for the ProjectDatabaseKafkaTopics API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectDatabaseKafkaTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ProjectDatabaseKafkaTopicSpec   `json:"spec"`
	Status ProjectDatabaseKafkaTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectDatabaseKafkaTopicList contains a list of ProjectDatabaseKafkaTopics
type ProjectDatabaseKafkaTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectDatabaseKafkaTopic `json:"items"`
}

// Repository type metadata.
var (
	ProjectDatabaseKafkaTopic_Kind             = "ProjectDatabaseKafkaTopic"
	ProjectDatabaseKafkaTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectDatabaseKafkaTopic_Kind}.String()
	ProjectDatabaseKafkaTopic_KindAPIVersion   = ProjectDatabaseKafkaTopic_Kind + "." + CRDGroupVersion.String()
	ProjectDatabaseKafkaTopic_GroupVersionKind = CRDGroupVersion.WithKind(ProjectDatabaseKafkaTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectDatabaseKafkaTopic{}, &ProjectDatabaseKafkaTopicList{})
}

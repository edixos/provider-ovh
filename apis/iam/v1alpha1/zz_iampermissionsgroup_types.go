/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IAMPermissionsGroupInitParameters struct {

	// +listType=set
	Allow []*string `json:"allow,omitempty" tf:"allow,omitempty"`

	// +listType=set
	Deny []*string `json:"deny,omitempty" tf:"deny,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +listType=set
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type IAMPermissionsGroupObservation struct {

	// +listType=set
	Allow []*string `json:"allow,omitempty" tf:"allow,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// +listType=set
	Deny []*string `json:"deny,omitempty" tf:"deny,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +listType=set
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`
}

type IAMPermissionsGroupParameters struct {

	// +kubebuilder:validation:Optional
	// +listType=set
	Allow []*string `json:"allow,omitempty" tf:"allow,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Deny []*string `json:"deny,omitempty" tf:"deny,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

// IAMPermissionsGroupSpec defines the desired state of IAMPermissionsGroup
type IAMPermissionsGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IAMPermissionsGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IAMPermissionsGroupInitParameters `json:"initProvider,omitempty"`
}

// IAMPermissionsGroupStatus defines the observed state of IAMPermissionsGroup.
type IAMPermissionsGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IAMPermissionsGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IAMPermissionsGroup is the Schema for the IAMPermissionsGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,lb}
type IAMPermissionsGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   IAMPermissionsGroupSpec   `json:"spec"`
	Status IAMPermissionsGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IAMPermissionsGroupList contains a list of IAMPermissionsGroups
type IAMPermissionsGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMPermissionsGroup `json:"items"`
}

// Repository type metadata.
var (
	IAMPermissionsGroup_Kind             = "IAMPermissionsGroup"
	IAMPermissionsGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IAMPermissionsGroup_Kind}.String()
	IAMPermissionsGroup_KindAPIVersion   = IAMPermissionsGroup_Kind + "." + CRDGroupVersion.String()
	IAMPermissionsGroup_GroupVersionKind = CRDGroupVersion.WithKind(IAMPermissionsGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&IAMPermissionsGroup{}, &IAMPermissionsGroupList{})
}

// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneRecordInitParameters struct {

	// The type of the record
	Fieldtype *string `json:"fieldtype,omitempty" tf:"fieldtype,omitempty"`

	// The name of the record. It can be an empty string.
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	// The TTL of the record, it shall be >= to 60.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The value of the record
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The domain to add the record to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneRecordObservation struct {

	// The type of the record
	Fieldtype *string `json:"fieldtype,omitempty" tf:"fieldtype,omitempty"`

	// The record ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the record. It can be an empty string.
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	// The TTL of the record, it shall be >= to 60.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The value of the record
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The domain to add the record to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneRecordParameters struct {

	// The type of the record
	// +kubebuilder:validation:Optional
	Fieldtype *string `json:"fieldtype,omitempty" tf:"fieldtype,omitempty"`

	// The name of the record. It can be an empty string.
	// +kubebuilder:validation:Optional
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	// The TTL of the record, it shall be >= to 60.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The value of the record
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The domain to add the record to
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ZoneRecordSpec defines the desired state of ZoneRecord
type ZoneRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneRecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneRecordInitParameters `json:"initProvider,omitempty"`
}

// ZoneRecordStatus defines the observed state of ZoneRecord.
type ZoneRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneRecord is the Schema for the ZoneRecords API. ovh_domain_zone_record.html.markdownsubcategory : "Domain names"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ZoneRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fieldtype) || (has(self.initProvider) && has(self.initProvider.fieldtype))",message="spec.forProvider.fieldtype is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ZoneRecordSpec   `json:"spec"`
	Status ZoneRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneRecordList contains a list of ZoneRecords
type ZoneRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneRecord `json:"items"`
}

// Repository type metadata.
var (
	ZoneRecord_Kind             = "ZoneRecord"
	ZoneRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneRecord_Kind}.String()
	ZoneRecord_KindAPIVersion   = ZoneRecord_Kind + "." + CRDGroupVersion.String()
	ZoneRecord_GroupVersionKind = CRDGroupVersion.WithKind(ZoneRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneRecord{}, &ZoneRecordList{})
}

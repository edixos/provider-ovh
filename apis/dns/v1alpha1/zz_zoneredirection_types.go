/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneRedirectionInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Keywords *string `json:"keywords,omitempty" tf:"keywords,omitempty"`

	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneRedirectionObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Keywords *string `json:"keywords,omitempty" tf:"keywords,omitempty"`

	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneRedirectionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Keywords *string `json:"keywords,omitempty" tf:"keywords,omitempty"`

	// +kubebuilder:validation:Optional
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ZoneRedirectionSpec defines the desired state of ZoneRedirection
type ZoneRedirectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneRedirectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneRedirectionInitParameters `json:"initProvider,omitempty"`
}

// ZoneRedirectionStatus defines the observed state of ZoneRedirection.
type ZoneRedirectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneRedirectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ZoneRedirection is the Schema for the ZoneRedirections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ZoneRedirection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ZoneRedirectionSpec   `json:"spec"`
	Status ZoneRedirectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneRedirectionList contains a list of ZoneRedirections
type ZoneRedirectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneRedirection `json:"items"`
}

// Repository type metadata.
var (
	ZoneRedirection_Kind             = "ZoneRedirection"
	ZoneRedirection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneRedirection_Kind}.String()
	ZoneRedirection_KindAPIVersion   = ZoneRedirection_Kind + "." + CRDGroupVersion.String()
	ZoneRedirection_GroupVersionKind = CRDGroupVersion.WithKind(ZoneRedirection_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneRedirection{}, &ZoneRedirectionList{})
}

// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DetailsInitParameters struct {

	// Template change log details
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Set up the server using the provided hostname instead of the default hostname
	CustomHostname *string `json:"customHostname,omitempty" tf:"custom_hostname,omitempty"`

	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	InstallRtm *bool `json:"installRtm,omitempty" tf:"install_rtm,omitempty"`

	InstallSQLServer *bool `json:"installSqlServer,omitempty" tf:"install_sql_server,omitempty"`

	// language
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	NoRaid *bool `json:"noRaid,omitempty" tf:"no_raid,omitempty"`

	// Indicate the URL where your postinstall customisation script is located
	PostInstallationScriptLink *string `json:"postInstallationScriptLink,omitempty" tf:"post_installation_script_link,omitempty"`

	// indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'
	PostInstallationScriptReturn *string `json:"postInstallationScriptReturn,omitempty" tf:"post_installation_script_return,omitempty"`

	ResetHwRaid *bool `json:"resetHwRaid,omitempty" tf:"reset_hw_raid,omitempty"`

	// Name of the ssh key that should be installed. Password login will be disabled
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	SoftRaidDevices *float64 `json:"softRaidDevices,omitempty" tf:"soft_raid_devices,omitempty"`

	// Use the distribution's native kernel instead of the recommended OVH Kernel
	UseDistribKernel *bool `json:"useDistribKernel,omitempty" tf:"use_distrib_kernel,omitempty"`

	UseSpla *bool `json:"useSpla,omitempty" tf:"use_spla,omitempty"`
}

type DetailsObservation struct {

	// Template change log details
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Set up the server using the provided hostname instead of the default hostname
	CustomHostname *string `json:"customHostname,omitempty" tf:"custom_hostname,omitempty"`

	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	InstallRtm *bool `json:"installRtm,omitempty" tf:"install_rtm,omitempty"`

	InstallSQLServer *bool `json:"installSqlServer,omitempty" tf:"install_sql_server,omitempty"`

	// language
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	NoRaid *bool `json:"noRaid,omitempty" tf:"no_raid,omitempty"`

	// Indicate the URL where your postinstall customisation script is located
	PostInstallationScriptLink *string `json:"postInstallationScriptLink,omitempty" tf:"post_installation_script_link,omitempty"`

	// indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'
	PostInstallationScriptReturn *string `json:"postInstallationScriptReturn,omitempty" tf:"post_installation_script_return,omitempty"`

	ResetHwRaid *bool `json:"resetHwRaid,omitempty" tf:"reset_hw_raid,omitempty"`

	// Name of the ssh key that should be installed. Password login will be disabled
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	SoftRaidDevices *float64 `json:"softRaidDevices,omitempty" tf:"soft_raid_devices,omitempty"`

	// Use the distribution's native kernel instead of the recommended OVH Kernel
	UseDistribKernel *bool `json:"useDistribKernel,omitempty" tf:"use_distrib_kernel,omitempty"`

	UseSpla *bool `json:"useSpla,omitempty" tf:"use_spla,omitempty"`
}

type DetailsParameters struct {

	// Template change log details
	// +kubebuilder:validation:Optional
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Set up the server using the provided hostname instead of the default hostname
	// +kubebuilder:validation:Optional
	CustomHostname *string `json:"customHostname,omitempty" tf:"custom_hostname,omitempty"`

	// +kubebuilder:validation:Optional
	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstallRtm *bool `json:"installRtm,omitempty" tf:"install_rtm,omitempty"`

	// +kubebuilder:validation:Optional
	InstallSQLServer *bool `json:"installSqlServer,omitempty" tf:"install_sql_server,omitempty"`

	// language
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// +kubebuilder:validation:Optional
	NoRaid *bool `json:"noRaid,omitempty" tf:"no_raid,omitempty"`

	// Indicate the URL where your postinstall customisation script is located
	// +kubebuilder:validation:Optional
	PostInstallationScriptLink *string `json:"postInstallationScriptLink,omitempty" tf:"post_installation_script_link,omitempty"`

	// indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'
	// +kubebuilder:validation:Optional
	PostInstallationScriptReturn *string `json:"postInstallationScriptReturn,omitempty" tf:"post_installation_script_return,omitempty"`

	// +kubebuilder:validation:Optional
	ResetHwRaid *bool `json:"resetHwRaid,omitempty" tf:"reset_hw_raid,omitempty"`

	// Name of the ssh key that should be installed. Password login will be disabled
	// +kubebuilder:validation:Optional
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// +kubebuilder:validation:Optional
	SoftRaidDevices *float64 `json:"softRaidDevices,omitempty" tf:"soft_raid_devices,omitempty"`

	// Use the distribution's native kernel instead of the recommended OVH Kernel
	// +kubebuilder:validation:Optional
	UseDistribKernel *bool `json:"useDistribKernel,omitempty" tf:"use_distrib_kernel,omitempty"`

	// +kubebuilder:validation:Optional
	UseSpla *bool `json:"useSpla,omitempty" tf:"use_spla,omitempty"`
}

type ServerInstallTaskInitParameters struct {

	// If set, reboot the server on the specified boot id during destroy phase
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	Details []DetailsInitParameters `json:"details,omitempty" tf:"details,omitempty"`

	// Partition scheme name.
	PartitionSchemeName *string `json:"partitionSchemeName,omitempty" tf:"partition_scheme_name,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Template name
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type ServerInstallTaskObservation struct {

	// If set, reboot the server on the specified boot id during destroy phase
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	// Details of this task
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	Details []DetailsObservation `json:"details,omitempty" tf:"details,omitempty"`

	// Completion date
	DoneDate *string `json:"doneDate,omitempty" tf:"done_date,omitempty"`

	// Function name
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	// Partition scheme name.
	PartitionSchemeName *string `json:"partitionSchemeName,omitempty" tf:"partition_scheme_name,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Task Creation date
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// Task status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Template name
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type ServerInstallTaskParameters struct {

	// If set, reboot the server on the specified boot id during destroy phase
	// +kubebuilder:validation:Optional
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	Details []DetailsParameters `json:"details,omitempty" tf:"details,omitempty"`

	// Partition scheme name.
	// +kubebuilder:validation:Optional
	PartitionSchemeName *string `json:"partitionSchemeName,omitempty" tf:"partition_scheme_name,omitempty"`

	// The internal name of your dedicated server.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Template name
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

// ServerInstallTaskSpec defines the desired state of ServerInstallTask
type ServerInstallTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerInstallTaskParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerInstallTaskInitParameters `json:"initProvider,omitempty"`
}

// ServerInstallTaskStatus defines the observed state of ServerInstallTask.
type ServerInstallTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerInstallTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerInstallTask is the Schema for the ServerInstallTasks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ServerInstallTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateName) || (has(self.initProvider) && has(self.initProvider.templateName))",message="spec.forProvider.templateName is a required parameter"
	Spec   ServerInstallTaskSpec   `json:"spec"`
	Status ServerInstallTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerInstallTaskList contains a list of ServerInstallTasks
type ServerInstallTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerInstallTask `json:"items"`
}

// Repository type metadata.
var (
	ServerInstallTask_Kind             = "ServerInstallTask"
	ServerInstallTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerInstallTask_Kind}.String()
	ServerInstallTask_KindAPIVersion   = ServerInstallTask_Kind + "." + CRDGroupVersion.String()
	ServerInstallTask_GroupVersionKind = CRDGroupVersion.WithKind(ServerInstallTask_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerInstallTask{}, &ServerInstallTaskList{})
}

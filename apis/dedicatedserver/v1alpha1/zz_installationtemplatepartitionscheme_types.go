// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstallationTemplatePartitionSchemeInitParameters struct {

	// name of this partitioning scheme
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// This template name
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type InstallationTemplatePartitionSchemeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// name of this partitioning scheme
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// This template name
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type InstallationTemplatePartitionSchemeParameters struct {

	// name of this partitioning scheme
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications)
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// This template name
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

// InstallationTemplatePartitionSchemeSpec defines the desired state of InstallationTemplatePartitionScheme
type InstallationTemplatePartitionSchemeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstallationTemplatePartitionSchemeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstallationTemplatePartitionSchemeInitParameters `json:"initProvider,omitempty"`
}

// InstallationTemplatePartitionSchemeStatus defines the observed state of InstallationTemplatePartitionScheme.
type InstallationTemplatePartitionSchemeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstallationTemplatePartitionSchemeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstallationTemplatePartitionScheme is the Schema for the InstallationTemplatePartitionSchemes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type InstallationTemplatePartitionScheme struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateName) || (has(self.initProvider) && has(self.initProvider.templateName))",message="spec.forProvider.templateName is a required parameter"
	Spec   InstallationTemplatePartitionSchemeSpec   `json:"spec"`
	Status InstallationTemplatePartitionSchemeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstallationTemplatePartitionSchemeList contains a list of InstallationTemplatePartitionSchemes
type InstallationTemplatePartitionSchemeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstallationTemplatePartitionScheme `json:"items"`
}

// Repository type metadata.
var (
	InstallationTemplatePartitionScheme_Kind             = "InstallationTemplatePartitionScheme"
	InstallationTemplatePartitionScheme_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstallationTemplatePartitionScheme_Kind}.String()
	InstallationTemplatePartitionScheme_KindAPIVersion   = InstallationTemplatePartitionScheme_Kind + "." + CRDGroupVersion.String()
	InstallationTemplatePartitionScheme_GroupVersionKind = CRDGroupVersion.WithKind(InstallationTemplatePartitionScheme_Kind)
)

func init() {
	SchemeBuilder.Register(&InstallationTemplatePartitionScheme{}, &InstallationTemplatePartitionSchemeList{})
}

// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ServerInstallTask
func (mg *ServerInstallTask) GetTerraformResourceType() string {
	return "ovh_dedicated_server_install_task"
}

// GetConnectionDetailsMapping for this ServerInstallTask
func (tr *ServerInstallTask) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ServerInstallTask
func (tr *ServerInstallTask) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ServerInstallTask
func (tr *ServerInstallTask) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ServerInstallTask
func (tr *ServerInstallTask) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ServerInstallTask
func (tr *ServerInstallTask) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ServerInstallTask
func (tr *ServerInstallTask) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ServerInstallTask
func (tr *ServerInstallTask) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ServerInstallTask using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ServerInstallTask) LateInitialize(attrs []byte) (bool, error) {
	params := &ServerInstallTaskParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ServerInstallTask) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ServerNetworking
func (mg *ServerNetworking) GetTerraformResourceType() string {
	return "ovh_dedicated_server_networking"
}

// GetConnectionDetailsMapping for this ServerNetworking
func (tr *ServerNetworking) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ServerNetworking
func (tr *ServerNetworking) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ServerNetworking
func (tr *ServerNetworking) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ServerNetworking
func (tr *ServerNetworking) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ServerNetworking
func (tr *ServerNetworking) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ServerNetworking
func (tr *ServerNetworking) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ServerNetworking
func (tr *ServerNetworking) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ServerNetworking using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ServerNetworking) LateInitialize(attrs []byte) (bool, error) {
	params := &ServerNetworkingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ServerNetworking) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ServerRebootTask
func (mg *ServerRebootTask) GetTerraformResourceType() string {
	return "ovh_dedicated_server_reboot_task"
}

// GetConnectionDetailsMapping for this ServerRebootTask
func (tr *ServerRebootTask) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ServerRebootTask
func (tr *ServerRebootTask) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ServerRebootTask
func (tr *ServerRebootTask) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ServerRebootTask
func (tr *ServerRebootTask) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ServerRebootTask
func (tr *ServerRebootTask) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ServerRebootTask
func (tr *ServerRebootTask) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ServerRebootTask
func (tr *ServerRebootTask) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ServerRebootTask using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ServerRebootTask) LateInitialize(attrs []byte) (bool, error) {
	params := &ServerRebootTaskParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ServerRebootTask) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ServerUpdate
func (mg *ServerUpdate) GetTerraformResourceType() string {
	return "ovh_dedicated_server_update"
}

// GetConnectionDetailsMapping for this ServerUpdate
func (tr *ServerUpdate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ServerUpdate
func (tr *ServerUpdate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ServerUpdate
func (tr *ServerUpdate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ServerUpdate
func (tr *ServerUpdate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ServerUpdate
func (tr *ServerUpdate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ServerUpdate
func (tr *ServerUpdate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ServerUpdate
func (tr *ServerUpdate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ServerUpdate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ServerUpdate) LateInitialize(attrs []byte) (bool, error) {
	params := &ServerUpdateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ServerUpdate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InstallationTemplate
func (mg *InstallationTemplate) GetTerraformResourceType() string {
	return "ovh_me_installation_template"
}

// GetConnectionDetailsMapping for this InstallationTemplate
func (tr *InstallationTemplate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InstallationTemplate
func (tr *InstallationTemplate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InstallationTemplate
func (tr *InstallationTemplate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InstallationTemplate
func (tr *InstallationTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InstallationTemplate
func (tr *InstallationTemplate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InstallationTemplate
func (tr *InstallationTemplate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this InstallationTemplate
func (tr *InstallationTemplate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this InstallationTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InstallationTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &InstallationTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InstallationTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InstallationTemplatePartitionScheme
func (mg *InstallationTemplatePartitionScheme) GetTerraformResourceType() string {
	return "ovh_me_installation_template_partition_scheme"
}

// GetConnectionDetailsMapping for this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this InstallationTemplatePartitionScheme
func (tr *InstallationTemplatePartitionScheme) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this InstallationTemplatePartitionScheme using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InstallationTemplatePartitionScheme) LateInitialize(attrs []byte) (bool, error) {
	params := &InstallationTemplatePartitionSchemeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InstallationTemplatePartitionScheme) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InstallationTemplatePartitionSchemeHardwareRaid
func (mg *InstallationTemplatePartitionSchemeHardwareRaid) GetTerraformResourceType() string {
	return "ovh_me_installation_template_partition_scheme_hardware_raid"
}

// GetConnectionDetailsMapping for this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this InstallationTemplatePartitionSchemeHardwareRaid
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this InstallationTemplatePartitionSchemeHardwareRaid using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) LateInitialize(attrs []byte) (bool, error) {
	params := &InstallationTemplatePartitionSchemeHardwareRaidParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InstallationTemplatePartitionSchemeHardwareRaid) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InstallationTemplatePartitionSchemePartition
func (mg *InstallationTemplatePartitionSchemePartition) GetTerraformResourceType() string {
	return "ovh_me_installation_template_partition_scheme_partition"
}

// GetConnectionDetailsMapping for this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this InstallationTemplatePartitionSchemePartition
func (tr *InstallationTemplatePartitionSchemePartition) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this InstallationTemplatePartitionSchemePartition using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InstallationTemplatePartitionSchemePartition) LateInitialize(attrs []byte) (bool, error) {
	params := &InstallationTemplatePartitionSchemePartitionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InstallationTemplatePartitionSchemePartition) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpxeScript
func (mg *IpxeScript) GetTerraformResourceType() string {
	return "ovh_me_ipxe_script"
}

// GetConnectionDetailsMapping for this IpxeScript
func (tr *IpxeScript) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpxeScript
func (tr *IpxeScript) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpxeScript
func (tr *IpxeScript) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpxeScript
func (tr *IpxeScript) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpxeScript
func (tr *IpxeScript) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpxeScript
func (tr *IpxeScript) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this IpxeScript
func (tr *IpxeScript) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this IpxeScript using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpxeScript) LateInitialize(attrs []byte) (bool, error) {
	params := &IpxeScriptParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpxeScript) GetTerraformSchemaVersion() int {
	return 0
}

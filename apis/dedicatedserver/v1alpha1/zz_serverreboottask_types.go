// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerRebootTaskInitParameters struct {

	// Change this value to recreate a reboot task.
	Keepers []*string `json:"keepers,omitempty" tf:"keepers,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServerRebootTaskObservation struct {

	// Details of this task
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Completion date
	DoneDate *string `json:"doneDate,omitempty" tf:"done_date,omitempty"`

	// Function name
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Change this value to recreate a reboot task.
	Keepers []*string `json:"keepers,omitempty" tf:"keepers,omitempty"`

	// Last update
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Task Creation date
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// Task status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ServerRebootTaskParameters struct {

	// Change this value to recreate a reboot task.
	// +kubebuilder:validation:Optional
	Keepers []*string `json:"keepers,omitempty" tf:"keepers,omitempty"`

	// The internal name of your dedicated server.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// ServerRebootTaskSpec defines the desired state of ServerRebootTask
type ServerRebootTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerRebootTaskParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerRebootTaskInitParameters `json:"initProvider,omitempty"`
}

// ServerRebootTaskStatus defines the observed state of ServerRebootTask.
type ServerRebootTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerRebootTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerRebootTask is the Schema for the ServerRebootTasks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ServerRebootTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keepers) || (has(self.initProvider) && has(self.initProvider.keepers))",message="spec.forProvider.keepers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ServerRebootTaskSpec   `json:"spec"`
	Status ServerRebootTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerRebootTaskList contains a list of ServerRebootTasks
type ServerRebootTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerRebootTask `json:"items"`
}

// Repository type metadata.
var (
	ServerRebootTask_Kind             = "ServerRebootTask"
	ServerRebootTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerRebootTask_Kind}.String()
	ServerRebootTask_KindAPIVersion   = ServerRebootTask_Kind + "." + CRDGroupVersion.String()
	ServerRebootTask_GroupVersionKind = CRDGroupVersion.WithKind(ServerRebootTask_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerRebootTask{}, &ServerRebootTaskList{})
}

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivatedatabaseUserInitParameters struct {

	// The internal name of your private database
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// User name used to connect on your databases
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type PrivatedatabaseUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The internal name of your private database
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// User name used to connect on your databases
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type PrivatedatabaseUserParameters struct {

	// Password for the new user ( alphanumeric and 8 characters minimum )
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The internal name of your private database
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// User name used to connect on your databases
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// PrivatedatabaseUserSpec defines the desired state of PrivatedatabaseUser
type PrivatedatabaseUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivatedatabaseUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivatedatabaseUserInitParameters `json:"initProvider,omitempty"`
}

// PrivatedatabaseUserStatus defines the observed state of PrivatedatabaseUser.
type PrivatedatabaseUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivatedatabaseUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivatedatabaseUser is the Schema for the PrivatedatabaseUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type PrivatedatabaseUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	Spec   PrivatedatabaseUserSpec   `json:"spec"`
	Status PrivatedatabaseUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivatedatabaseUserList contains a list of PrivatedatabaseUsers
type PrivatedatabaseUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivatedatabaseUser `json:"items"`
}

// Repository type metadata.
var (
	PrivatedatabaseUser_Kind             = "PrivatedatabaseUser"
	PrivatedatabaseUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivatedatabaseUser_Kind}.String()
	PrivatedatabaseUser_KindAPIVersion   = PrivatedatabaseUser_Kind + "." + CRDGroupVersion.String()
	PrivatedatabaseUser_GroupVersionKind = CRDGroupVersion.WithKind(PrivatedatabaseUser_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivatedatabaseUser{}, &PrivatedatabaseUserList{})
}

// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReverseInitParameters struct {
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	IPReverse *string `json:"ipReverse,omitempty" tf:"ip_reverse,omitempty"`

	Reverse *string `json:"reverse,omitempty" tf:"reverse,omitempty"`
}

type ReverseObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	IPReverse *string `json:"ipReverse,omitempty" tf:"ip_reverse,omitempty"`

	Reverse *string `json:"reverse,omitempty" tf:"reverse,omitempty"`
}

type ReverseParameters struct {

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	IPReverse *string `json:"ipReverse,omitempty" tf:"ip_reverse,omitempty"`

	// +kubebuilder:validation:Optional
	Reverse *string `json:"reverse,omitempty" tf:"reverse,omitempty"`
}

// ReverseSpec defines the desired state of Reverse
type ReverseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReverseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReverseInitParameters `json:"initProvider,omitempty"`
}

// ReverseStatus defines the observed state of Reverse.
type ReverseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReverseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Reverse is the Schema for the Reverses API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type Reverse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ip) || (has(self.initProvider) && has(self.initProvider.ip))",message="spec.forProvider.ip is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipReverse) || (has(self.initProvider) && has(self.initProvider.ipReverse))",message="spec.forProvider.ipReverse is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reverse) || (has(self.initProvider) && has(self.initProvider.reverse))",message="spec.forProvider.reverse is a required parameter"
	Spec   ReverseSpec   `json:"spec"`
	Status ReverseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReverseList contains a list of Reverses
type ReverseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Reverse `json:"items"`
}

// Repository type metadata.
var (
	Reverse_Kind             = "Reverse"
	Reverse_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Reverse_Kind}.String()
	Reverse_KindAPIVersion   = Reverse_Kind + "." + CRDGroupVersion.String()
	Reverse_GroupVersionKind = CRDGroupVersion.WithKind(Reverse_Kind)
)

func init() {
	SchemeBuilder.Register(&Reverse{}, &ReverseList{})
}

// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectContainerregistryUserInitParameters struct {

	// User email.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Registry name
	Login *string `json:"login,omitempty" tf:"login,omitempty"`

	// RegistryID
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ProjectContainerregistryUserObservation struct {

	// User email.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Registry name
	Login *string `json:"login,omitempty" tf:"login,omitempty"`

	// RegistryID
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// User name
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ProjectContainerregistryUserParameters struct {

	// User email.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Registry name
	// +kubebuilder:validation:Optional
	Login *string `json:"login,omitempty" tf:"login,omitempty"`

	// RegistryID
	// +kubebuilder:validation:Optional
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// ProjectContainerregistryUserSpec defines the desired state of ProjectContainerregistryUser
type ProjectContainerregistryUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectContainerregistryUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectContainerregistryUserInitParameters `json:"initProvider,omitempty"`
}

// ProjectContainerregistryUserStatus defines the observed state of ProjectContainerregistryUser.
type ProjectContainerregistryUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectContainerregistryUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectContainerregistryUser is the Schema for the ProjectContainerregistryUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectContainerregistryUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.login) || (has(self.initProvider) && has(self.initProvider.login))",message="spec.forProvider.login is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.registryId) || (has(self.initProvider) && has(self.initProvider.registryId))",message="spec.forProvider.registryId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ProjectContainerregistryUserSpec   `json:"spec"`
	Status ProjectContainerregistryUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectContainerregistryUserList contains a list of ProjectContainerregistryUsers
type ProjectContainerregistryUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectContainerregistryUser `json:"items"`
}

// Repository type metadata.
var (
	ProjectContainerregistryUser_Kind             = "ProjectContainerregistryUser"
	ProjectContainerregistryUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectContainerregistryUser_Kind}.String()
	ProjectContainerregistryUser_KindAPIVersion   = ProjectContainerregistryUser_Kind + "." + CRDGroupVersion.String()
	ProjectContainerregistryUser_GroupVersionKind = CRDGroupVersion.WithKind(ProjectContainerregistryUser_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectContainerregistryUser{}, &ProjectContainerregistryUserList{})
}

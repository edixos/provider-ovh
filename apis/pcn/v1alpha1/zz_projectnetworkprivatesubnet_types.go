// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPPoolsInitParameters struct {
}

type IPPoolsObservation struct {
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	End *string `json:"end,omitempty" tf:"end,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type IPPoolsParameters struct {
}

type ProjectNetworkPrivateSubnetInitParameters struct {
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	End *string `json:"end,omitempty" tf:"end,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type ProjectNetworkPrivateSubnetObservation struct {
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	End *string `json:"end,omitempty" tf:"end,omitempty"`

	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPPools []IPPoolsObservation `json:"ipPools,omitempty" tf:"ip_pools,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type ProjectNetworkPrivateSubnetParameters struct {

	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// +kubebuilder:validation:Optional
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Optional
	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name of the resource representing the id of the cloud project.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

// ProjectNetworkPrivateSubnetSpec defines the desired state of ProjectNetworkPrivateSubnet
type ProjectNetworkPrivateSubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectNetworkPrivateSubnetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectNetworkPrivateSubnetInitParameters `json:"initProvider,omitempty"`
}

// ProjectNetworkPrivateSubnetStatus defines the observed state of ProjectNetworkPrivateSubnet.
type ProjectNetworkPrivateSubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectNetworkPrivateSubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectNetworkPrivateSubnet is the Schema for the ProjectNetworkPrivateSubnets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectNetworkPrivateSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.end) || (has(self.initProvider) && has(self.initProvider.end))",message="spec.forProvider.end is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkId) || (has(self.initProvider) && has(self.initProvider.networkId))",message="spec.forProvider.networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.start) || (has(self.initProvider) && has(self.initProvider.start))",message="spec.forProvider.start is a required parameter"
	Spec   ProjectNetworkPrivateSubnetSpec   `json:"spec"`
	Status ProjectNetworkPrivateSubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectNetworkPrivateSubnetList contains a list of ProjectNetworkPrivateSubnets
type ProjectNetworkPrivateSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectNetworkPrivateSubnet `json:"items"`
}

// Repository type metadata.
var (
	ProjectNetworkPrivateSubnet_Kind             = "ProjectNetworkPrivateSubnet"
	ProjectNetworkPrivateSubnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectNetworkPrivateSubnet_Kind}.String()
	ProjectNetworkPrivateSubnet_KindAPIVersion   = ProjectNetworkPrivateSubnet_Kind + "." + CRDGroupVersion.String()
	ProjectNetworkPrivateSubnet_GroupVersionKind = CRDGroupVersion.WithKind(ProjectNetworkPrivateSubnet_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectNetworkPrivateSubnet{}, &ProjectNetworkPrivateSubnetList{})
}
